--- 
import "@/styles/globals.css";

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=PT+Sans&family=IBM+Plex+Serif:wght@100;300;500;700&family=Noto+Sans+Display:wght@900&display=swap" rel="stylesheet">
		<title>{title}</title>
	</head>
	<body class="lining-nums">
		<slot />
	</body>
</html>
<script>
	// ADD REVEAL EFFECT
	const effectEls: NodeList | null =
	  document.querySelectorAll(".slide-in-from-bottom-10");

	const callback = (
	  entries: IntersectionObserverEntry[],
	  observer: IntersectionObserver,
	) => {
	  entries.forEach((entry) => {
		if (entry.isIntersecting) {
		  entry.target.classList.remove("paused");
		  entry.target.classList.add("running");

		  observer.unobserve(entry.target);
		}
	  });
	};

	const options: IntersectionObserverInit = {};
	if (effectEls) {
	  const myObserver: IntersectionObserver = new IntersectionObserver(
		callback,
		options,
	  );
	  effectEls.forEach((el: Node) => {
		myObserver.observe(el as Element);
	  });
	}

	// PREVENT WIDOW WORDS ON LINES
	document.querySelectorAll("p, .no-widow-word").forEach(function (para) {
	  var text = para.innerHTML;
	  var words = text.trim().split(/\s+/);

	  // Only proceed if there is more than one word
	  if (words.length > 1) {
		words[words.length - 2] += "&nbsp;" + words.pop();
		para.innerHTML = words.join(" ");
	  }
	});
</script>