---
import Layout from "../layouts/Layout.astro";
import HeaderWithNav from "@/components/HeaderWithNav.astro";
import { getEntry } from "astro:content";

const intro = await getEntry("home", "code");
const { Content } = await intro.render();

import {
  H1,
  P,
  typographyVariants,
} from "@/components/ui/typography";
import { Button, buttonVariants } from "@/components/ui/button";
---

<Layout title="Typography for Shadcn UI.">
  <HeaderWithNav />

  <main
    class="flex flex-col items-center w-[640px] max-w-[calc(100% - 2rem)] m-auto p-4"
  >
    <H1 padding="md">
      Concept Typography lib to help conform to a Design System
    </H1>
    <P>
      This is a POC to help enforce text conform to a Design System by setting
      default values for; font-family, size, line-height, kerning and more. A
      good design System has thought through a lot of font properties and some
      not so obvious (looking at you lining-nums & other font variants ). This
      can often get complex where you might start setting all the values on a
      root element of pages. But as a site develops and changes, managing all
      the default classes for something as simple as a p tag can get complex.
      This conforms to Shadcn's styling pattern using twMerge() and gives one
      place to manage your typography. The defaults allow for change based on tw
      responsive breakpoints. This also separates HTML5 tag symantics from
      display logic, so you can still have the correct header tags but override
      size or anything else based on the design context. Note - The order of
      options for typographyVariants() is set to make typography as extendable
      as possible via overwrites so className classes alway take presidence. The
      idea is you add the @/components/ui/typography class to your Shadcn
      project and then ammend to your needs (along with tailwind.config and
      global.css vars), you can also fold it into other Shadcn components too
      (@see @/components/ui/button.tsx). Aside from all that you can add default
      animation efffects so that text can animate in when it hits the view-port.
      (@see Layout.astro script)
    </P>

    <!-- <a
      href="/examples"
      class={`pt-12 ${typographyVariants({
        reveal: "animate",
      })} ${buttonVariants({
        variant: "linkGreen",
      })}`}
      >Examples
    </a> -->

    <div
      class={`pt-12 ${typographyVariants({
        reveal: "animate",
      })}`}
    >
      <Button className="pt-12" asChild>
        <a
          href="/examples"
          class={`${buttonVariants({ variant: "customTypography" })}`}
        >
          Examples
        </a>
      </Button>
    </div>

    <div
      class={`hidden md:block code mt-12 text-left ${typographyVariants({
        reveal: "animate",
      })}`}
    >
      <!-- <Small theme="grey">
        <Content />
      </Small> -->
    </div>
  </main>
</Layout>
<style></style>
